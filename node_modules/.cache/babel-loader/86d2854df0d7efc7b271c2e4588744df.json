{"ast":null,"code":"var _jsxFileName = \"/home/levis/Dokumente/Websites/kahootclone/src/sites/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport '../index.css';\nimport Question from \"../components/question.js\";\nimport AnswerRow from \"../components/answerRow.js\";\nimport { useNavigate, useParams } from 'react-router-dom';\nimport React, { useEffect, useState, Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Quiz() {\n  _s();\n\n  let navigate = useNavigate();\n  let params = useParams();\n  let [questionIndex, setIndex] = useState(0);\n  let [pointCounter, setPointCounter] = useState(0);\n  let hello = 1;\n  let quiz = {\n    wins: [{\n      name: \"Levis\",\n      count: 2\n    }],\n    questions: [{\n      text: \"How many Ducks?\",\n      answers: [{\n        text: \"Es sind 5 Enten, die fluoreszieren\",\n        isRight: false\n      }, {\n        text: \"2\",\n        isRight: false\n      }, {\n        text: \"3\",\n        isRight: true\n      }, {\n        text: \"4\",\n        isRight: false\n      }]\n    }, {\n      text: \"How many Dogs?\",\n      answers: [{\n        text: \"5123\",\n        isRight: false\n      }, {\n        text: \"2323\",\n        isRight: true\n      }, {\n        text: \"3123\",\n        isRight: false\n      }, {\n        text: \"4123\",\n        isRight: false\n      }]\n    }, {\n      text: \"How many Cats?\",\n      answers: [{\n        text: \"51223\",\n        isRight: false\n      }, {\n        text: \"2323223\",\n        isRight: true\n      }, {\n        text: \"312233\",\n        isRight: false\n      }, {\n        text: \"413223\",\n        isRight: false\n      }]\n    }]\n  };\n  let [text, setText] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://localhost:8000/echo\").then(response => response.json()).then(data => setText(data.message));\n  });\n\n  const handleSetIndex = isRight => {\n    if (isRight == true) {\n      setPointCounter(pointCounter + 1);\n    }\n\n    setIndex(questionIndex + 1);\n    console.log(pointCounter);\n    console.log(isRight);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", text, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), questionIndex < quiz.questions.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: quiz.questions[questionIndex],\n        index: questionIndex + 1,\n        numberOfQuestions: quiz.questions.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AnswerRow, {\n        answers: quiz.questions[questionIndex].answers.slice(0, quiz.questions[questionIndex].answers.length / 2),\n        getFurther: handleSetIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AnswerRow, {\n        answers: quiz.questions[questionIndex].answers.slice(quiz.questions[questionIndex].answers.length / 2, quiz.questions[questionIndex].answers.length),\n        getFurther: handleSetIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Hello \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quiz, \"L3YfmHrXC8fQSVjChSfW23izX2g=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/home/levis/Dokumente/Websites/kahootclone/src/sites/Quiz.js"],"names":["Question","AnswerRow","useNavigate","useParams","React","useEffect","useState","Component","Quiz","navigate","params","questionIndex","setIndex","pointCounter","setPointCounter","hello","quiz","wins","name","count","questions","text","answers","isRight","setText","fetch","then","response","json","data","message","handleSetIndex","console","log","length","slice"],"mappings":";;;AAAA,OAAO,cAAP;AAEA,OAAOA,QAAP,MAAqB,2BAArB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AAEA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AAGA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAsCC,SAAtC,QAAwD,OAAxD;;;;AAGA,SAASC,IAAT,GAAgB;AAAA;;AACd,MAAIC,QAAQ,GAAGP,WAAW,EAA1B;AACA,MAAIQ,MAAM,GAAGP,SAAS,EAAtB;AACA,MAAI,CAACQ,aAAD,EAAgBC,QAAhB,IAA4BN,QAAQ,CAAC,CAAD,CAAxC;AACA,MAAI,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,CAAD,CAA9C;AACA,MAAIS,KAAK,GAAG,CAAZ;AACA,MAAIC,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAE,CACF;AACEC,MAAAA,IAAI,EAAE,OADR;AAEEC,MAAAA,KAAK,EAAE;AAFT,KADE,CADG;AAQTC,IAAAA,SAAS,EAAE,CACT;AACIC,MAAAA,IAAI,EAAE,iBADV;AAEIC,MAAAA,OAAO,EAAE,CAAC;AACRD,QAAAA,IAAI,EAAE,oCADE;AAERE,QAAAA,OAAO,EAAE;AAFD,OAAD,EAIT;AACEF,QAAAA,IAAI,EAAE,GADR;AAEEE,QAAAA,OAAO,EAAE;AAFX,OAJS,EAQT;AACEF,QAAAA,IAAI,EAAE,GADR;AAEEE,QAAAA,OAAO,EAAE;AAFX,OARS,EAYR;AACCF,QAAAA,IAAI,EAAE,GADP;AAECE,QAAAA,OAAO,EAAE;AAFV,OAZQ;AAFb,KADS,EAqBT;AACIF,MAAAA,IAAI,EAAE,gBADV;AAEIC,MAAAA,OAAO,EAAE,CAAC;AACRD,QAAAA,IAAI,EAAE,MADE;AAERE,QAAAA,OAAO,EAAE;AAFD,OAAD,EAIT;AACGF,QAAAA,IAAI,EAAE,MADT;AAEEE,QAAAA,OAAO,EAAE;AAFX,OAJS,EAOP;AACAF,QAAAA,IAAI,EAAE,MADN;AAEAE,QAAAA,OAAO,EAAE;AAFT,OAPO,EAWT;AACEF,QAAAA,IAAI,EAAE,MADR;AAEEE,QAAAA,OAAO,EAAE;AAFX,OAXS;AAFb,KArBS,EAuCT;AACMF,MAAAA,IAAI,EAAE,gBADZ;AAEMC,MAAAA,OAAO,EAAE,CAAC;AACRD,QAAAA,IAAI,EAAE,OADE;AAERE,QAAAA,OAAO,EAAE;AAFD,OAAD,EAGN;AACDF,QAAAA,IAAI,EAAE,SADL;AAEDE,QAAAA,OAAO,EAAE;AAFR,OAHM,EAMN;AACDF,QAAAA,IAAI,EAAE,QADL;AAEDE,QAAAA,OAAO,EAAE;AAFR,OANM,EASN;AACDF,QAAAA,IAAI,EAAE,QADL;AAEDE,QAAAA,OAAO,EAAE;AAFR,OATM;AAFf,KAvCS;AARF,GAAX;AAmEA,MAAI,CAACF,IAAD,EAAOG,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAA9B;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,KAAK,CAAC,4BAAD,CAAL,CAAoCC,IAApC,CAA0CC,QAAD,IAAYA,QAAQ,CAACC,IAAT,EAArD,EACCF,IADD,CACOG,IAAD,IAASL,OAAO,CAACK,IAAI,CAACC,OAAN,CADtB;AAGD,GAJQ,CAAT;;AAQA,QAAMC,cAAc,GAAIR,OAAD,IAAa;AAClC,QAAIA,OAAO,IAAI,IAAf,EAAqB;AACnBT,MAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AAED;;AACDD,IAAAA,QAAQ,CAACD,aAAa,GAAG,CAAjB,CAAR;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYpB,YAAZ;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACD,GARD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,sBAAKF,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEIV,aAAa,GAAGK,IAAI,CAACI,SAAL,CAAec,MAA/B,gBACA;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAElB,IAAI,CAACI,SAAL,CAAeT,aAAf,CAApB;AAAqD,QAAA,KAAK,EAAEA,aAAa,GAAG,CAA5E;AAA+E,QAAA,iBAAiB,EAAEK,IAAI,CAACI,SAAL,CAAec;AAAjH;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAW,QAAA,OAAO,EAAElB,IAAI,CAACI,SAAL,CAAeT,aAAf,EAA+BW,OAA/B,CAAuCa,KAAvC,CAA6C,CAA7C,EAAgDnB,IAAI,CAACI,SAAL,CAAeT,aAAf,EAA+BW,OAA/B,CAAuCY,MAAvC,GAAgD,CAAhG,CAApB;AACE,QAAA,UAAU,EAAEH;AADd;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE,QAAC,SAAD;AAAW,QAAA,OAAO,EAAEf,IAAI,CAACI,SAAL,CAAeT,aAAf,EAA+BW,OAA/B,CAAuCa,KAAvC,CAA6CnB,IAAI,CAACI,SAAL,CAAeT,aAAf,EAA8BW,OAA9B,CAAsCY,MAAtC,GAA+C,CAA5F,EAA+FlB,IAAI,CAACI,SAAL,CAAeT,aAAf,EAA8BW,OAA9B,CAAsCY,MAArI,CAApB;AACG,QAAA,UAAU,EAAEH;AADf;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADA,gBASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAjHQvB,I;UACQN,W,EACFC,S;;;KAFNK,I;AAmHT,eAAeA,IAAf","sourcesContent":["import '../index.css';\n\nimport Question from \"../components/question.js\";\nimport AnswerRow from \"../components/answerRow.js\";\n\nimport { useNavigate, useParams } from 'react-router-dom';\n\n\nimport React, { useEffect, useState,  Component }  from 'react';\n\n\nfunction Quiz() {\n  let navigate = useNavigate();\n  let params = useParams();\n  let [questionIndex, setIndex] = useState(0);\n  let [pointCounter, setPointCounter] = useState(0);\n  let hello = 1;\n  let quiz = {\n    wins: [\n        {\n          name: \"Levis\",\n          count: 2\n        }\n      ],\n\n    questions: [\n      {\n          text: \"How many Ducks?\",\n          answers: [{\n            text: \"Es sind 5 Enten, die fluoreszieren\",\n            isRight: false\n          },\n          {\n            text: \"2\",\n            isRight: false\n          },\n          {\n            text: \"3\",\n            isRight: true\n          },\n           {\n            text: \"4\",\n            isRight: false\n          }],\n\n        },\n      {\n          text: \"How many Dogs?\",\n          answers: [{\n            text: \"5123\",\n            isRight: false\n          },\n          {\n             text: \"2323\",\n            isRight: true\n          },{\n            text: \"3123\",\n            isRight: false\n          },\n          {\n            text: \"4123\",\n            isRight: false\n          }]\n        },\n      {\n            text: \"How many Cats?\",\n            answers: [{\n              text: \"51223\",\n              isRight: false\n            }, {\n              text: \"2323223\",\n              isRight: true\n            }, {\n              text: \"312233\",\n              isRight: false\n            }, {\n              text: \"413223\",\n              isRight: false\n            }]\n          }\n      ]\n    };\n\n\n  let [text, setText] = useState(\"\")\n\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/echo\").then((response)=>response.json())\n    .then((data)=> setText(data.message));\n    \n  })\n\n\n\n  const handleSetIndex = (isRight) => {\n    if (isRight == true) {\n      setPointCounter(pointCounter + 1)\n\n    }\n    setIndex(questionIndex + 1);\n    console.log(pointCounter);\n    console.log(isRight);\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <p> {text} </p>\n      { questionIndex < quiz.questions.length  ?\n        <>\n          <Question question={quiz.questions[questionIndex  ]} index={questionIndex + 1} numberOfQuestions={quiz.questions.length}/>\n          <AnswerRow answers={quiz.questions[questionIndex ].answers.slice(0, quiz.questions[questionIndex ].answers.length / 2)}\n            getFurther={handleSetIndex} />\n          <AnswerRow answers={quiz.questions[questionIndex ].answers.slice(quiz.questions[questionIndex].answers.length / 2, quiz.questions[questionIndex].answers.length) }\n             getFurther={handleSetIndex} />\n        </>\n        :\n        <p> Hello </p>\n      }\n    </div>\n  );\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}