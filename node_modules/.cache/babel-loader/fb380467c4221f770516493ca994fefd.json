{"ast":null,"code":"var _jsxFileName = \"/home/levis/Dokumente/Websites/kahootclone/src/components/slideInDialogBox.js\",\n    _s = $RefreshSig$();\n\nimport '../index.css';\nimport Button from \"./button.js\";\nimport React, { useEffect, useState, useRef, Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SlideInDialogBox(_ref) {\n  _s();\n\n  let {\n    func,\n    isOn\n  } = _ref;\n  let [name, setName] = useState(\"\");\n  let [background, setBackground] = useState(\"bg-red-700\");\n  let [pos, setPos] = useState(\"translate1\");\n  useEffect(() => {\n    if (isOn == true) {\n      setBackground(\"bg-red-700\");\n      setPos(\"translate2\");\n    } else {\n      setBackground(\"bg-red-700\");\n      setPos(\"translate1\");\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-64 w-full absolute auto z-10 flex justify-center transform duration-300 ease-in-out bg-red-500 \" + isOn,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"rounded-xl tranform duration-300 ease-in-out hover:scale-110 p-1 m-1  border-black border-2 p-4\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      click: () => {\n        if (pos == \"translate1\") {\n          setPos(\"translate2\");\n        } else {\n          setPos(\"translate1\");\n        }\n      },\n      text: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 6\n  }, this);\n}\n\n_s(SlideInDialogBox, \"xSghNcMIBOpwmmkwvxKIZ+zrvOc=\");\n\n_c = SlideInDialogBox;\nexport default SlideInDialogBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlideInDialogBox\");","map":{"version":3,"sources":["/home/levis/Dokumente/Websites/kahootclone/src/components/slideInDialogBox.js"],"names":["Button","React","useEffect","useState","useRef","Component","SlideInDialogBox","func","isOn","name","setName","background","setBackground","pos","setPos","e","target","value"],"mappings":";;;AAAA,OAAO,cAAP;AACA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,SAA7C,QAA+D,OAA/D;;;AAGA,SAASC,gBAAT,OAAuC;AAAA;;AAAA,MAAb;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAa;AAKnC,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAA9B;AACA,MAAI,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,YAAD,CAA1C;AACA,MAAI,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,YAAD,CAA5B;AAIAD,EAAAA,SAAS,CAAC,MAAM;AAClB,QAAIM,IAAI,IAAI,IAAZ,EAAkB;AAEjBI,MAAAA,aAAa,CAAC,YAAD,CAAb;AACAE,MAAAA,MAAM,CAAC,YAAD,CAAN;AACA,KAJD,MAIO;AACNF,MAAAA,aAAa,CAAC,YAAD,CAAb;AAEAE,MAAAA,MAAM,CAAC,YAAD,CAAN;AACA;AACD,GAVW,EAUT,EAVS,CAAT;AAcA,sBACC;AAAK,IAAA,SAAS,EAAE,sGAAsGN,IAAtH;AAAA,4BACF;AAAM,MAAA,SAAS,EAAE,qBAAjB;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEO;AACC,QAAA,SAAS,EAAC,iGADX;AAEC,QAAA,KAAK,EAAEC,IAFR;AAGC,QAAA,QAAQ,EAAEM,CAAC,IAAIL,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV;AAHvB;AAAA;AAAA;AAAA;AAAA,cAFP;AAAA;AAAA;AAAA;AAAA;AAAA,YADE,eAWF,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,MAAM;AAAC,YAAIJ,GAAG,IAAI,YAAX,EAAwB;AACrCC,UAAAA,MAAM,CAAC,YAAD,CAAN;AACA,SAFa,MAEP;AACNA,UAAAA,MAAM,CAAC,YAAD,CAAN;AACA;AAAC,OAJV;AAKU,MAAA,IAAI,EAAC;AALf;AAAA;AAAA;AAAA;AAAA,YAXE;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAuBH;;GAhDQR,gB;;KAAAA,gB;AAoDT,eAAeA,gBAAf","sourcesContent":["import '../index.css';\nimport Button from \"./button.js\";\nimport React, { useEffect, useState, useRef, Component }  from 'react';\n\n\nfunction SlideInDialogBox({func, isOn}){\n\n\n\n\n    let [name, setName] = useState(\"\");\n    let [background, setBackground] = useState(\"bg-red-700\");\n    let [pos, setPos] = useState(\"translate1\");\n\n\n\n    useEffect(() => {\n\t\tif (isOn == true) {\n\t\t\t\n\t\t\tsetBackground(\"bg-red-700\");\n\t\t\tsetPos(\"translate2\")\n\t\t} else {\n\t\t\tsetBackground(\"bg-red-700\");\n\t\t\n\t\t\tsetPos(\"translate1\")\n\t\t}\n\t}, [])\n\n\n\n    return (\n    \t<div className={\"h-64 w-full absolute auto z-10 flex justify-center transform duration-300 ease-in-out bg-red-500 \" + isOn\t}>\n\t\t\t<div  className={\"flex justify-center\" }>\n\t\t\t\t<p> Name: </p>\n        \t\t<input \n        \t\t\tclassName=\"rounded-xl tranform duration-300 ease-in-out hover:scale-110 p-1 m-1  border-black border-2 p-4\"\n        \t\t\tvalue={name}\n        \t\t\tonChange={e => setName(e.target.value)}\n\n        \t\t/>\n\n      \t\t</div>\t\t\n\t\t\t<Button click={() => {if (pos == \"translate1\"){\n         \t\t\tsetPos(\"translate2\")\n         \t\t} else {\n         \t\t\tsetPos(\"translate1\")\n         \t\t}}} \n         \t\t\t\ttext=\"Send\"\n         \t\t/>\n\t\t</div>\n        \n    );\n\n}\n\n\n\nexport default SlideInDialogBox;"]},"metadata":{},"sourceType":"module"}